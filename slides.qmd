---
title: "synthesizAR: A Python framework for forward-modeling optically-thin emission from field-aligned hydrodynamic models" 
subtitle: Coronal Heating ISFM Meeting / NASA GSFC / 3 April 2024
authors:
- Will Barnes
institute:
- AU/NASA GSFC
format:
  revealjs:
    margin: 0
    width: 100%
    height: 100%
    code-block-height: 1000px
    theme: [default,theme/sunpy-theme.scss]
    logo: static/sunpy_logo_portrait_powered.png
    css: logo.css
    footer: "[wtbarnes.github.io/klimchuk-isfm-2024-talk](https://wtbarnes.github.io/klimchuk-isfm-2024-talk)"
title-slide-attributes: 
  data-background-image: static/synthesizar_logo_vertical.png
  data-background-position: 5% 25%
  data-background-opacity: 45%
  data-background-size: 35%
bibliography: references.bib
csl: apj.csl
---
```{python}
#| echo: false
#| eval: true
import itertools

import astropy.time
import astropy.units as u
import matplotlib.pyplot as plt
import numpy as np
import sunpy.map
import sunpy.sun

from astropy.coordinates import SkyCoord
from astropy.visualization import ImageNormalize, quantity_support
from sunpy.coordinates import Heliocentric, Helioprojective

from synthesizAR.models.geometry import semi_circular_loop

def make_box_origin(orientation, obstime, box_dimensions):
    frame_hcc = Heliocentric(observer=orientation, obstime=obstime)
    box_origin = orientation.transform_to(frame_hcc)
    box_origin = SkyCoord(x=box_origin.x,
                          y=box_origin.y,
                          z=box_origin.z+box_dimensions[2]/2,
                          frame=box_origin.frame)
    return box_origin


def make_box(orientation, obstime, box_dimensions):
    box_origin = make_box_origin(orientation, obstime, box_dimensions)
    corners = list(itertools.product(box_dimensions[0]/2*[-1,1],
                                     box_dimensions[1]/2*[-1,1],
                                     box_dimensions[2]/2*[-1,1]))
    edges = []
    for possible_edges in itertools.combinations(corners,2):
        diff_edges = u.Quantity(possible_edges[0])-u.Quantity(possible_edges[1])
        if np.count_nonzero(diff_edges) == 1:
            edges.append(possible_edges)

    edge_coords = []
    for edge in edges:
        edge_coords.append(SkyCoord(x=box_origin.x+u.Quantity([edge[0][0],edge[1][0]]),
                                    y=box_origin.y+u.Quantity([edge[0][1],edge[1][1]]),
                                    z=box_origin.z+u.Quantity([edge[0][2],edge[1][2]]),
                                    frame=box_origin.frame))
    return edge_coords

def is_coord_in_box(edges, coord):
    edges = SkyCoord(edges)
    coord_hcc = coord.transform_to(edges.frame)
    in_x = np.logical_and(coord_hcc.x<edges.x.max(), coord_hcc.x>edges.x.min())
    in_y = np.logical_and(coord_hcc.y<edges.y.max(), coord_hcc.y>edges.y.min())
    in_z = np.logical_and(coord_hcc.z<edges.z.max(), coord_hcc.z>edges.z.min())
    return np.all([in_x, in_y, in_z], axis=0)

def make_fake_map(ref_coord):
    instrument_data = np.nan * np.ones((50,50))
    instrument_header = sunpy.map.make_fitswcs_header(instrument_data,
                                                      ref_coord,
                                                      scale=u.Quantity([10,10])*u.arcsec/u.pix)
    return sunpy.map.Map(instrument_data, instrument_header)
```

## Modeling Optically-thin Emission

:::{.incremental}
- Modeling optically-thin intensity, $I$, requires computing the following line-of-sight integral:
$$
I = \int\mathrm{d}h\,\varepsilon(n,T),
$$
- where:
  - $h$ is a vertical coordinate along the line of sight (LOS)
  - $\varepsilon$ is the emissivity
  - $n\equiv n(h),T\equiv T(h)$ are the temperature and density along the LOS
- This requires knowing four things:
  1. What structures are emitting--**geometry**
  2. $T,n$ of emitting structures as a function of space and time--**loop model**
  3. How the plasma is emitting as a function of $n,T$--**emission model**
  4. How is the emission being observed--**instrument**
:::

## Modeling Optically-thin Emission

:::: {.columns}
:::{.column width="60%"}
$$
\begin{align}
I &= \int\mathrm{d}h\,\varepsilon(n,T)\\
\int\mathrm{d}A\,I &= \int\mathrm{d}A\int\mathrm{d}h\,\varepsilon(n,T) = \int\mathrm{d}V\,\varepsilon(n,T)\\
I &\approx \frac{1}{A_{\mathrm{pix}}}\int\mathrm{d}V\,\varepsilon(n,T)
\end{align}
$$

- Emission confined to discrete loops intersecting LOS
- Loop segments have cross-section $A_s$ and length $\delta_s$
$$
\int\mathrm{d}V\,\varepsilon(n,T) = \sum_s\int\mathrm{d}V_s\varepsilon_s(n,T) \approx \sum_sA_s\delta_s\varepsilon_s(n,T)\\
I \approx \frac{1}{A_{\mathrm{pix}}}\sum_sA_s\delta_s\varepsilon_s(n,T)
$$
:::
:::{.column width="40%"}
```{python}
#| echo: false
#| fig-align: center

box_dimensions = u.Quantity([15,15,100])*u.Mm

hcc_orientation = SkyCoord(lon=0*u.deg,
                           lat=0*u.deg,
                           radius=sunpy.sun.constants.radius,
                           frame='heliographic_stonyhurst')
date = astropy.time.Time('2020-01-01')

box = make_box(hcc_orientation, date, box_dimensions)

box_origin = make_box_origin(hcc_orientation, date, box_dimensions)
box_top = SkyCoord(x=box_origin.x,
                   y=box_origin.y,
                   z=box_origin.z+box_dimensions[-1]/2,
                   frame=box_origin.frame)

loops = [semi_circular_loop(L,observer=hcc_orientation,n_points=10000) for L in np.arange(30,200,10)*u.Mm]

observer = SkyCoord(lon=0*u.deg, lat=-90*u.deg, radius=1*u.AU, frame='heliographic_stonyhurst')
frame_hpc = Helioprojective(observer=observer, obstime=date)

image = make_fake_map(hcc_orientation.transform_to(frame_hpc))

all_coords = [c.transform_to(image.coordinate_frame) for c in box+loops]
all_coords = [(c,color) for c,color in zip(all_coords,len(box)*['k']+len(loops)*['C0'])]
all_coords = sorted(all_coords, key=lambda x: x[0].distance.min(), reverse=False)

fig = plt.figure(figsize=(6,12))
ax = fig.add_subplot(projection=image)
image.plot(axes=ax, title=False, annotate=False)
#image.draw_grid(color='k')
image.draw_limb(axes=ax, color='k')
for l in loops:
    ax.plot_coord(l, color='C0')
for l in loops:
    inside_box = is_coord_in_box(box, l)
    if inside_box.any():
        ax.plot_coord(l[inside_box], color='C1', )
for edge in box:
    ax.plot_coord(edge, color='k')
#for c,color in all_coords:
#    ax.plot_coord(c, color=color)
ax.set_ylim(22,50)
ax.set_xlim(15,34)
for coord in ax.coords:
    coord.set_ticks_visible(False)
    coord.set_ticklabel_visible(False)
ax.annotate(
    'LOS',
    image.wcs.world_to_pixel(box_top),
    textcoords='offset pixels',
    xytext=(0,200),
    va='center',
    ha='center',
    arrowprops=dict(color='k', arrowstyle='-|>', ls='-', lw=2),
)
fig.set_frameon(False)
```
:::
::::

## The Emissivity kernel

- Compute per loop segment using field-aligned model (function of $s$ and $t$)
- For a narrowband imager (e.g. AIA),
$$
\varepsilon = K(T)n^2\quad[\mathrm{DN}\,\mathrm{pix}^{-1}\,\mathrm{s}^{-1}\,\mathrm{cm}^{-1}]
$$
- For a spectral line intensity with a transition at $\lambda_{ij}$,
$$
\begin{align}
\varepsilon &= \frac{1}{4\pi}A_{ij}\frac{hc}{\lambda_{ij}}n_{ij}\quad[\mathrm{erg}\,\mathrm{cm}^{-3}\,\mathrm{s}^{-1}\,\mathrm{sr}^{-1}] \\
&= \frac{1}{4\pi}A_{ij}\frac{hc}{\lambda_{ij}}\frac{n_{ij}}{n_{X^+}}\frac{n_{X^+}}{n_X}\frac{n_X}{n_H}\frac{n_H}{n_e}n_e = \frac{1}{4\pi}G_{ij}(n,T)n_e^2
\end{align}
$$
- For the emission measure distribution on the interval $T_a\le T<T_b$,
$$
\varepsilon = n^2H(T-T_a)H(T_b-T)\quad[\mathrm{cm}^{-6}]
$$

## The `synthesizAR` Package

- `synthesizAR` = `synthesi`s of `A`ctive `R`egion emission (pronounced like "synthesizer")
- Largely a product of my PhD--development started in 2016, sporadic since 2019, *many* growing pains
- Pure Python, leverages scientific Python and "PyAstro" software stack
- Modular design--geometry, field-aligned model, instrument, LOS are all configurable
- Parallelized using `dask`--emission computation from each loop is "embarassingly" parallel
- Emission model can account for time-dependent effects (e.g. non-equilibrium ionization)
- Limitations:
  - All emission is assumed to be **optically-thin**
  - All emission is assumed to be **thermal** (i.e. no transport effects)
  - All emission confined to **discrete field lines** (i.e. not volume filling)

::: {.aside}
More details in @barnes_understanding_2019
:::

## Workflow {visibility="hidden" background-image="static/synthesizar-flowchart.png" background-size="85%" background-position="center"}

## Development {visibility="hidden"}

:::: {.columns}

::: {.column width="5%"}
:::

::: {.column width="45%"}
![](static/synthesizar-github.png)
:::

::: {.column width="45%"}
![](static/synthesizar-docs.png)
:::

::: {.column width="5%"}
:::

::::

::: footer
[github.com/wtbarnes/synthesizAR](https://github.com/wtbarnes/synthesizar)
:::

## Toy Loop Model

```{python}
#| echo: true
#| output-location: fragment
import synthesizAR
from synthesizAR.models import semi_circular_bundle

obstime = astropy.time.Time.now()
pos = SkyCoord(lon=0*u.deg, lat=0*u.deg, radius=1*u.AU, obstime=obstime, frame='heliographic_stonyhurst')
bundle_coords = semi_circular_bundle(50 * u.Mm, 1*u.Mm, 500, observer=pos)
print(bundle_coords[0][:2])
```

```{python}
#| echo: true
#| fig-align: center
#| output-location: fragment
strands = [synthesizAR.Loop(f'strand{i}', c) for i, c in enumerate(bundle_coords)]
bundle = synthesizAR.Skeleton(strands)
side_on_view = SkyCoord(lon=0*u.deg, lat=-90*u.deg, radius=1*u.AU, frame=pos.frame)
bundle.peek(observer=side_on_view)
```

## Toy Loop Model

```{python}
#| echo: true
#| output-location: fragment
from synthesizAR.instruments import InstrumentSDOAIA
from synthesizAR.interfaces import RTVInterface

rtv = RTVInterface(heating_rate=1e-3*u.Unit('erg cm-3 s-1'))
bundle.load_loop_simulations(rtv)
print(bundle.loops[0].electron_temperature[0,:5])
print(bundle.loops[0].density[0,:5])
```

```{python}
#| echo: true
#| fig-align: center
#| output-location: fragment
aia = InstrumentSDOAIA([0, 1]*u.s, side_on_view, pad_fov=(10, 10)*u.arcsec)
maps = aia.observe(bundle, channels=aia.channels[2:3])
maps['171'][0].peek()
```

## Toy Loop Model: Summary of Steps

1. What structures are emitting--`synthesizAR.Skeleton`, `synthesizAR.Loop`
2. $T,n$ of these structures as a function of $s,t$--`synthesizAR.interfaces.RTVInterface`
3. How plasma emits as a function of $T,n$--`synthesizAR.atomic.EmissionModel` (optional)
4. How is the emission being observed--`synthesizar.instruments.InstrumentSDOAIA`

```{mermaid}
flowchart LR
  coords["SkyCoord
		      SkyCoord
          ...
		      SkyCoord"]
  loops("synthesizAR.Loop
         synthesizAR.Loop
         ...
         synthesizAR.Loop"):::synthesizar
  skeleton("synthesizAR.Skeleton"):::synthesizar
  modelparams["model parameters"]
  model("synthesizAR.interfaces.RTVInterface"):::synthesizar
  observer["SkyCoord"]
  instrument("synthesizAR.instruments.InstrumentSDOAIA"):::synthesizar
  ions["fiasco.Ion
        fiasco.Ion
        ...
        fiasco.Ion"]
  emmodel("synthesizAR.atomic.EmissionModel"):::synthesizar
  smap(["sunpy.map.Map"])
  coords --> loops
  loops --> skeleton
  model --> skeleton
  modelparams --> model
  skeleton --> instrument
  observer --> instrument
  emmodel -.-> instrument
  ions --> emmodel
  instrument --> smap
  classDef synthesizar fill:#FE7900
```

## Toy Loop Model: Different Observer

```{python}
#| echo: true
#| fig-align: center
#| output-location: fragment
#| code-line-numbers: "|1"
top_down_view = SkyCoord(lon=0*u.deg, lat=0*u.deg, radius=1*u.AU, frame=pos.frame)
aia = InstrumentSDOAIA([0, 1]*u.s, top_down_view, pad_fov=(10, 10)*u.arcsec)
maps = aia.observe(bundle, channels=aia.channels[2:3])
maps['171'][0].peek()
```

## Toy Loop Model: Different Observer

```{python}
#| echo: false
#| fig-align: center
#| output-location: fragment
from sunpy.map import pixelate_coord_path, sample_at_coords

coord_axis = SkyCoord(Tx=[-30, 30]*u.arcsec, Ty=0*u.arcsec,
                      frame=maps['171'][0].coordinate_frame)
coord_axis = pixelate_coord_path(maps['171'][0], coord_axis)
profile_axis = sample_at_coords(maps['171'][0], coord_axis)
coord_xs = SkyCoord(Tx=0*u.arcsec, Ty=[-10, 10]*u.arcsec,
                    frame=maps['171'][0].coordinate_frame)
coord_xs = pixelate_coord_path(maps['171'][0], coord_xs)
profile_xs = sample_at_coords(maps['171'][0], coord_xs)

fig = plt.figure()
ax = fig.add_subplot(111, projection=maps['171'][0])
maps['171'][0].plot(axes=ax)
ax.plot_coord(coord_axis)
ax.plot_coord(coord_xs)
```

```{python}
#| echo: false
#| fig-align: center
#| output-location: fragment
fig = plt.figure()
with quantity_support():
    ax = fig.add_subplot(121)
    ax.plot(coord_axis.separation(coord_axis[0]).to('arcsec'), profile_axis, color='C0')
    ax = fig.add_subplot(122)
    ax.plot(coord_xs.separation(coord_xs[0]).to('arcsec'), profile_xs, color='C1')
```

## Toy Loop Model: Using a Different Loop Model

```{python}
#| echo: true
#| fig-align: center
#| output-location: fragment
#| code-line-numbers: "|3,4"
from synthesizAR.interfaces import MartensInterface

martens = MartensInterface(1e-3*u.Unit('erg cm-3 s-1'))
bundle.load_loop_simulations(martens)
maps = aia.observe(bundle, channels=aia.channels[2:3])
maps['171'][0].peek()
```

## Aside: The `fiasco` Python interface to CHIANTI {visibility="hidden"}

- Object oriented approach, HDF5 database, `astropy.units` everywhere
- Currently only compatible with **v8** of the database

```{python}
#| echo: true
#| output-location: column-fragment
import fiasco
temperature = np.logspace(5, 7, 100) * u.K
fe_15 = fiasco.Ion('Fe 15', temperature)
print(fe_15)
```
```{python}
#| echo: true
#| output-location: column-fragment
print(fe_15[0])
```
```{python}
#| echo: true
#| output-location: column-fragment
print(fe_15.ionization_rate[50:55])
```

```{python}
#| echo: true
#| output-location: column-fragment
iron = fiasco.Element('iron', temperature)
print(type(iron[14]))
print(iron[14].ion_name)
```

::: footer
[github.com/wtbarnes/fiasco](https://github.com/wtbarnes/fiasco), [fiasco.readthedocs.io](https://fiasco.readthedocs.io)
:::

## Toy Loop Model: Advanced Emission Modeling {visibility="hidden"}

- By default, `InstrumentSDOAIA` computes emission using temperature response functions
- Insufficient for: varying abundances, density dependence, time-dependent ionization
- Alternative: compute emissivity of each loop *per ion* and then integrate over $R(\lambda)$
- `EmissionModel`: select which ions you want to include, temperature range, density range

```{python}
#| eval: false
#| echo: true
from synthesizAR.atomic import EmissionModel

ni_14 = fiasco.Ion('Ni XIV', temperature)
fe_9 = fiasco.Ion('Fe IX', temperature)

density = np.logspace(8,12,20) * u.cm**(-3)
em_model = EmissionModel(density, fe_9, ni_14)

em_model.calculate_emissivity_table('emiss_table.zarr')

maps = aia.observe(bundle, channels=aia.channels[2:3], emission_model=em_model)
```

## Application: Active Region Heating Diagnostics {background-video="static/noaa1158_low_frequency.mp4" background-size="contain" background-video-loop="true"}

::: {.aside}
See @barnes_understanding_2019,@barnes_understanding_2021
:::

## Application: Active Region Heating Diagnostics

- Emission measure slope, $a$,
$$
\begin{align}
\mathrm{EM}(T)&\sim n^2\tau_{rad} \sim T^{1-\alpha}n \sim T^{1-\alpha+1/\ell}\\
\mathrm{EM}(T)&\propto T^a
\end{align}
$$
  - For uninterrupted radiative and enthalpy-driven cooling, $a\sim2--2.5$
  - As heating frequency increases, $a$ increases with more isothermal $\mathrm{EM}$
- Time lag $\tau_{AB}$ between AIA channels $A$ and $B$
$$
\begin{align}
\mathcal{C}_{AB}(\tau) &= \mathcal{I}_A(t)\star\mathcal{I}_B(t) = \mathscr{F}^{-1}\left\{\mathscr{F}\left\{\mathcal{I}_A(-t)\right\}\mathscr{F}\left\{\mathcal{I}_B(t)\right\}\right\} \\
\tau_{AB} &= \mathrm{argmax}_{\tau}\,\mathcal{C}_{AB}(\tau)
\end{align}
$$
  - Proxy for the cooling time between characteristic temperatures of $A$ and $B$
  - $\tau_{AB}>0$ indicative of cooling, $\tau_{AB}<0$ suggests heating

::: {.aside}
@bradshaw_cooling_2010,@cargill_active_2014,@viall_evidence_2012,@barnes_understanding_2019
:::

## Application: Active Region Heating Diagnostics

::: {.r-stack}
![](static/barnes_2019_em_slope.png)

![](static/barnes_2019_em_dist.png){.fragment}

![](static/barnes_2019_time_lag.png){.fragment}

![](static/barnes_2021_heating_class.png){.fragment}
:::

::: {.aside}
See @barnes_understanding_2019,@barnes_understanding_2021
:::

## Application: EUV Flare Emission {background-video="http://solar.physics.montana.edu/www/reu/2022/bparker/files/aia_211_dist.mp4" background-size="contain" background-video-loop="true"}

::: {.aside}
Courtesy Brock Parker and Chunming Zhu (MSU)
:::

## Application: Observing Flows in the TR with ESIS-II

:::: {.columns}
::: {.column width="50%"}
![](static/tc_versus_beam_hydrad.png){.fragment}
:::
::: {.column width="50%"}
![](static/tc_versus_beam_nevii.png){.fragment}
:::
::::

::: {.aside}
Courtesy Jake Parker (NASA GSFC)
:::

## Summary

:::: {.columns}

::: {.column width="5%"}
:::

::: {.column width="25%"}
![](static/synthesizar_logo_vertical.png)
:::

::: {.column width="65%"}
- `synthesizAR`--pure *Python* package for modeling time-dependent emission from field-aligned models
- Models *thermal*, *optically-thin* emission confined to *discrete* loop structures
- Prioritizes modularity and flexibility--geometry, loop models, instrument
- Capabilities:
  - Works with *any* field-aligned loop model
  - Incorporate detailed atomic physics in emission modeling
  - Time-dependent, spatially-resolved emission
  - High-resolution, spectrally-resolved diagnostics
:::

::: {.column width="5%"}
:::

::::

## References

::: {#refs}
:::
